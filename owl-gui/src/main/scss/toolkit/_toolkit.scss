//**************************** Copyright Â© Jonathon Bell. All rights reserved.
//*
//*
//*  Version : $Header:$
//*
//*
//*  Purpose : Miscellaneous utility functions used throughout the Wolery.
//*
//*
//*  Comments: This file uses a tab size of 2 spaces.
//*                                                                     0-0
//*                                                                   (| v |)
//**********************************************************************w*w***

/**
 * Asserts that the given expression evaluates true, and halts the compilation
 * with an error if this is not in fact the case.
 *
 * For example, the statement:
 * {{{
 *    $_: assert($x);
 * }}}
 * halts compilation with an  assertion failure if the  variable `x` is false,
 * but has no effect otherwise (beyond assigning the value `true` to the dummy
 * variable `_`).
 *
 * @param  assertion  A boolean expression that is expected to evaluate true.
 * @param  message    An optional message to include in the failure report.
 *
 * @return `true` if the given expression evaluates true.
 */
@function assert($assertion,$message: $assertion)
{
  @if $assertion                                         // Assertion is true?
  {
    @return true;                                        // ...no problem then
  }

  @error "assertion failed: #{$message}";                // Report the failure
}

/**
 * Asserts that a given value has an expected type,  and halts the compilation
 * with an error if this is not in fact the case.
 *
 * For example, the statement:
 * {{{
 *    $_: assert($x,number);
 * }}}
 * halts compilation with an  assertion failure if the  variable `x` is not in
 * fact a number, but has no effect otherwise (beyond assigning a value `true` 
 * to the  dummy variable `_`).
 * 
 * @param  value  The value whose type is to be tested.
 * @param  type   The expected type of the given value.
 * 
 * @return `true` if the given value has the expected type.
 */
@function assert-type($value,$want)
{
  $got: type-of($value);                                 // Examine its type

  @return assert($want == $got,"expected type #{$want} but got #{$got}");
}

/**
 * Converts a length, expressed in pixels, into a multiple of the default font
 * size, expressed in terms of the typographic unit 'em'.
 *
 * Dimensions expressed in terms of 'em's scale naturally on different display 
 * devices because the OS adjusts the default font size automatically to match
 * the target screen resolution.
 *
 * This implementation assumes a default font size of 12 points (Mac OSX), and
 * rounds the result to 3 decimal places.
 *
 * @param  length  A length, assumed to be in pixels if no unit is specified.
 *
 * @return The given length, expressed as a multiple of the default font size
 *         and rounded to 3 decimal places.
 * @see    [[https://en.wikipedia.org/wiki/Em_(typography) Em (typography)]]
 */
@function em($length)
{
  $_: assert(type-of($length) == number);                // Validate argements

  @if unit($length) == "em"                              // In units of em?
  {
    $length: $length / 1em;                              // ...drop the unit
  }
  @else
  if unit($length) == "px"                               // In units of px?
  {
    $length: $length / 1px;                              // ...drop the unit
    $length: $length / 12;                               // ...scale to font
  }
  @else
  if unit($length) == ""                                 // No explicit units?
  {
    $length: $length / 12;                               // ...scale to font
  }
  @else                                                  // Some other unit?
  {
    @error "em: expected length but got '#{$length}'";   // ...not yet handled
  }

  @return 1em * round($length * 1000) / 1000;            // Adjust precision
}

/**
 * Returns the shade of gray whose red, green, and blue components are all set
 * to the same given value.
 *
 * @param  shade  A shade of gray, represented as an integer between 0 (black)
 *                and 255 (white).
 *
 * @return The color value describing the given shade of gray.
 */
@function gray($shade)
{
  @return rgb($shade,$shade,$shade);                     // Convert to color
}

/**
 * Return true if `prefix` is an initial prefix of the given string.
 *
 * @param  string  An arbitrary string.
 * @param  prefix  A possible prefix of the given string.
 * 
 * @return `true` if `prefix` is an initial prefix of the given string.
 */
@function starts-with($string,$prefix)
{
  $_:assert-type($string,string);                        // Validate argument
  $_:assert-type($prefix,string);                        // Validate argument

  @return str-index($string,$prefix) == 1;               // Is initial prefix?
}

//****************************************************************************
